# NOTES:
# cannot have conflicting container names

# docker-compose -p spring-social -f docker-compose.yml up -d
# COMMANDS:

version: '3.8'

services:
  #  just a label
  user-service:
    image: user-service
    ports:
      - "8081:8081"
    #    builds app
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    container_name: user-service
    environment:
      # property available provided by spring
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgresql-user-service
      - discovery-service
    networks:
      - spring-social

  post-service:
    image: post-service
    ports:
      - "8084:8084"
    #    builds app
    build:
      context: ./post-service
      dockerfile: ./Dockerfile
    container_name: post-service
    environment:
      # property available provided by spring
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb-post-service
      - discovery-service
    networks:
      - spring-social

  comment-service:
    image: comment-service
    ports:
      - "8082:8082"
    #    builds app
    build:
      context: ./comment-service
      dockerfile: ./Dockerfile
    container_name: comment-service
    environment:
      # property available provided by spring
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgresql-comment-service
      - discovery-service
    networks:
      - spring-social

  friendship-service:
    image: friendship-service
    ports:
      - "8083:8083"
    #    builds app
    build:
      context: ./friendship-service
      dockerfile: ./Dockerfile
    container_name: friendship-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # property available provided by spring
    depends_on:
      - mongodb-friendship-service
      - discovery-service
    networks:
      - spring-social

  notification-service:
    image: notification-service
    ports:
      - "8085:8085"
    #    builds app
    build:
      context: ./notification-service
      dockerfile: ./Dockerfile
    container_name: notification-service
    environment:
      #      property available provided by spring
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-service
      - broker
    networks:
      - spring-social

  api-gateway:
    image: api-gateway
    ports:
      - "8181:8181"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
    depends_on:
      - discovery-service
      - keycloak
    networks:
      - spring-social

  discovery-service:
    image: discovery-service
    ports:
      - "8761:8761"
    build:
      context: ./discovery-service
      dockerfile: ./Dockerfile
    container_name: discovery-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring-social

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 200
    networks:
      - spring-social

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:
    networks:
      - spring-social

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8282:8080"
    depends_on:
      - zookeeper
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      SERVER_SERVLET_CONTEXT_PATH: /kafkau
    networks:
      - spring-social

  keycloak:
    image: jboss/keycloak:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG
      DB_VENDOR: postgres
      DB_ADDR: postgresql-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/realms/spring-social-realm.json
    container_name: keycloak
    volumes:
      - ./realms/:/opt/jboss/keycloak/realms
    depends_on:
      - postgresql-keycloak
      - discovery-service
    networks:
      - spring-social

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    restart: unless-stopped
    container_name: zipkin
    networks:
      - spring-social

  postgresql-user-service:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: rootadmin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-service
    volumes:
      - ./data/postgres/users:/var/lib/postgresql/data
      - ./init/postgres/docker-entrypoint-initdb.d/user-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: postgresql-user-service
    restart: unless-stopped
    networks:
      - spring-social

  mongodb-post-service:
    image: mongo:latest
    ports:
      - "27016:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootadmin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/posts:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/post-service-init.js:/docker-entrypoint-initdb.d/post-service-init.js:ro
    container_name: mongodb-post-service
    restart: unless-stopped
    command: mongod --auth
    networks:
      - spring-social

  postgresql-comment-service:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: rootadmin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: comment-service
    volumes:
      - ./data/postgres/comments:/var/lib/postgresql/data
      - ./init/postgres/docker-entrypoint-initdb.d/comment-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: postgresql-comment-service
    restart: unless-stopped
    networks:
      - spring-social

  mongodb-friendship-service:
    image: mongo:latest
    ports:
      - "27014:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootadmin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/friendships:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/friendship-service-init.js:/docker-entrypoint-initdb.d/friendship-service-init.js:ro
    container_name: mongodb-friendship-service
    restart: unless-stopped
    command: mongod --auth
    networks:
      - spring-social

  postgresql-keycloak:
    image: postgres:latest
    restart: unless-stopped
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloak
      PGDATA: /data/postgres
    volumes:
      - ./data/postgres/keycloak:/var/lib/postgresql/data
    container_name: postgresql-keycloak
    networks:
      - spring-social

networks:
  spring-social:
    driver: bridge
